"""
Django settings for platformBackend project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
import datetime
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(os.path.join(BASE_DIR, 'apps'))
REPORTS_DIR = os.path.join(BASE_DIR, 'report')
SUITES_DIR = os.path.join(BASE_DIR, 'suites')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-_zhjrwaa%0%us_cgiarfbjz_86k))5t^47*myv_jy--2rume7$"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_filters',

    'configures',
    'debugtalks',
    'envs',
    'interfaces',
    'projects',
    'reports',
    'testcases',
    'testsuits',
    'user',
    'summary',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'corsheaders.middleware.CorsMiddleware', # 解决跨域
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_CREDENTIALS = True

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
    ],
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.PageNumberPaginationManual',
    'PAGE_SIZE': 10,
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    # ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # 设置日期时间字段的默认格式
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
}
# JWT_AUTH = {
#     # 指定token的有效期
#     'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
# }

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=60),  # 设置访问令牌的过期时间为60分钟
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1),     # 设置刷新令牌的过期时间为1天
    # 'BLACKLIST_AFTER_ROTATION': True,  # 在轮换后将 Token 加入黑名单
    # 'UPDATE_LAST_LOGIN': False,  # 控制是否更新用户最后登录时间
    #
    # 'ALGORITHM': 'HS256',  # JWT 使用的算法
    # 'SIGNING_KEY': SECRET_KEY,  # 用于签名和验证 Token 的秘钥
    # 'VERIFYING_KEY': None,  # 验证 Token 的秘钥

    'AUTH_HEADER_TYPES': ('Bearer', 'B', ),  # 请求头中 Token 的类型
    # 'USER_ID_FIELD': 'id',  # 用户标识字段
    # 'USER_ID_CLAIM': 'user_id',  # 用户身份声明
    #
    # 'AUTH_TOKEN_CLASSES': ('path.to.CustomRefreshToken',),  # 自定义 Token 类的路径
}


ROOT_URLCONF = "platformBackend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "platformBackend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "platformBackend",
        "USER": "root",
        "PASSWORD": "123456",
        "HOST": "127.0.0.1",
        "PORT": 3306,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE ='zh-hans'

TIME_ZONE ='Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 格式化器
        'simple': {  # 简单
            'format': '%(asctime)s - [%(levelname)s] - [msg]%(message)s'
        },
        'verbose': {  # 详细
            'format': '%(asctime)s [%(levelname)s] -%(name)s - [msg]%(message)s - [%(filename)s:%(lineno)d]'
        },
    },
    'filters': {  # 过滤器
        'require_debug_true': {  # 要求debug为True
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 处理器
        'console': {  # 控制台
            'level': 'DEBUG',  # 日志级别
            'filters': ['require_debug_true'],  # 过滤器
            'class': 'logging.StreamHandler',  # 处理器类
            'formatter': 'verbose',  # 格式化器
        },
        'file': {  # 文件
            'level': 'INFO',  # 日志级别
            'class': 'logging.handlers.RotatingFileHandler',  # 处理器类
            'filename': os.path.join(BASE_DIR, 'logs/mytest.log'),  # 日志文件路径
            'maxBytes': 100 * 1024 * 1024,  # 日志文件大小
            'backupCount': 10,  # 备份文件数量
            'formatter': 'verbose',  # 格式化器
        },
    },
    'loggers': {  # 日志器
        'mytest': {  # 日志器名称
            'handlers': ['console', 'file'],  # 处理器
            'propagate': True,  # 是否传递给父级日志器
            'level': 'DEBUG',  # 日志级别
        },
    },
}